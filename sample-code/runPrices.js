function updateAllPrices(transactionDetail, newPrices) {
    const updatedDetail = JSON.parse(JSON.stringify(transactionDetail)); // Copy to preserve original

    updatedDetail.transactions = updatedDetail.transactions.map(transaction => {
        const newPrice = newPrices.find(priceObj => priceObj.symbol === transaction.symbol);

        if (newPrice) {
            transaction.price = newPrice.price;
        }
        return transaction;
    });

    console.log(updatedDetail);
}

updateAllPrices({ // User-specific
        processId: null, // Frequency ID
        orderStatus: null, // COMPLETED || REVERSED
        transactions: [
            {
                orderId: null, // Unique ID generated by Binance
                function: "transaction1",
                symbol: "BTCUSDT",
                side: "BUY",
                price: null, // Price at which the order is to be placed (Not useful for report only required for coding purposes)
                cummulativeQuoteQty: null, // Quantity of ticker 2
                executedQty: null, // Quantity of ticker 1
                executedPrice: null, // Average price of the fill orders
                precision: 5, // The max precision accepted for a coin pair
            },
            {
                orderId: null,
                function: "transaction2",
                symbol: "ETHBTC",
                side: "BUY",
                price: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null,
                precision: 4
            },
            {
                orderId: null,
                function: "transaction3",
                symbol: "BNBETH",
                side: "BUY",
                price: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null,
                precision: 3
            },
            {
                orderId: null,
                function: "transaction4",
                symbol: "BNBUSDT",
                side: "SELL",
                price: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null,
                precision: 3
            },
            {
                orderId: null,
                function: "reverseTransaction1",
                symbol: "ETHUSDT", // Reverse function 3 by default (This value is dependent on function 3 - Update accordingly)
                side: "SELL", //    Depends on function 3
                price: null,
                cummulativeQuoteQty: null,
                executedQty: null,
                executedPrice: null,
                precision: 4
            }
        ]
    }, [
        { symbol: "BTCUSDT", price: "1"},
        { symbol: "ETHBTC", price: "2"},
        { symbol: "BNBETH", price: "3"},
        { symbol: "BNBUSDT", price: "4"}
    ])